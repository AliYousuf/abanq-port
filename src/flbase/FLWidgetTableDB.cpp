/****************************************************************************
** Form implementation generated from reading ui file 'FLWidgetTableDB.ui'
**
** Created: mar 31. mar 23:57:09 2009
**      by: The User Interface Compiler ($Id: qt/main.cpp   3.3.8   edited Jan 11 14:47 $)
**
** WARNING! All changes made in this file will be lost!
****************************************************************************/

#include "FLWidgetTableDB.h"

#include <qvariant.h>
#include <qpushbutton.h>
#include <qframe.h>
#include <qlabel.h>
#include <qlineedit.h>
#include <qcombobox.h>
#include <qwidgetstack.h>
#include <qtable.h>
#include <qbuttongroup.h>
#include <qlayout.h>
#include <qtooltip.h>
#include <qwhatsthis.h>
#include <qimage.h>
#include <qpixmap.h>

static const unsigned char image0_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10,
    0x08, 0x06, 0x00, 0x00, 0x00, 0x1f, 0xf3, 0xff, 0x61, 0x00, 0x00, 0x02,
    0xa8, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c, 0x65, 0x93, 0x4f, 0x68, 0x1c,
    0x65, 0x18, 0xc6, 0x7f, 0x5b, 0xa7, 0xf8, 0x8d, 0xac, 0x38, 0x83, 0x11,
    0xbe, 0x2d, 0x1e, 0x32, 0xd0, 0xc0, 0x0e, 0xb4, 0xd0, 0x85, 0x14, 0xbb,
    0x21, 0x1e, 0x42, 0x23, 0x68, 0x04, 0x2b, 0x7b, 0xaa, 0x7b, 0x29, 0x7a,
    0x56, 0x10, 0x8a, 0x20, 0x04, 0x2f, 0x82, 0x97, 0x5e, 0x44, 0x68, 0x6f,
    0x29, 0xf5, 0x90, 0x0d, 0x42, 0xe8, 0xc5, 0x34, 0x2b, 0x12, 0x98, 0x5e,
    0x34, 0x96, 0xa4, 0x65, 0x96, 0x52, 0x2c, 0x51, 0xd8, 0x2d, 0xb5, 0xdd,
    0x99, 0x43, 0x98, 0xfd, 0x50, 0xd9, 0xfd, 0x68, 0x07, 0x5e, 0x0f, 0x93,
    0x3f, 0x5b, 0xf3, 0x5c, 0xde, 0xd3, 0xfb, 0xfb, 0x9e, 0xf7, 0x79, 0xf8,
    0x4a, 0x22, 0x42, 0x10, 0x04, 0xa7, 0xae, 0x5e, 0xb9, 0x7a, 0xc3, 0x9f,
    0xf0, 0x95, 0xa7, 0xbc, 0x97, 0xc8, 0x51, 0xc6, 0x9a, 0x97, 0xcf, 0x7f,
    0x70, 0xfe, 0x02, 0x70, 0xd7, 0x5a, 0xcb, 0xb8, 0xc2, 0x6a, 0x88, 0x9e,
    0xd0, 0x58, 0x6b, 0x39, 0x06, 0x30, 0x73, 0x76, 0x66, 0x25, 0xfe, 0x33,
    0x9e, 0xae, 0x55, 0x6b, 0xa7, 0xac, 0x63, 0x43, 0x5f, 0xfb, 0x81, 0xa7,
    0xbd, 0x13, 0x4b, 0xdf, 0x2c, 0x6d, 0x5b, 0x6b, 0x03, 0xfe, 0x2f, 0x07,
    0x6c, 0x6e, 0xc1, 0xa1, 0x00, 0x98, 0x7f, 0xcc, 0xab, 0xd1, 0x6a, 0x44,
    0xfb, 0x97, 0x36, 0x26, 0x35, 0x6c, 0x6e, 0x6f, 0x62, 0x9e, 0x18, 0xbc,
    0x29, 0x8f, 0xc5, 0xcf, 0x16, 0xb7, 0x8e, 0x00, 0x72, 0xa8, 0x38, 0x15,
    0xc8, 0xc1, 0x01, 0x48, 0xd2, 0xe4, 0x57, 0x6b, 0xed, 0x64, 0xb4, 0x11,
    0xe1, 0x7a, 0x2e, 0x0a, 0x45, 0xac, 0x62, 0x82, 0x72, 0x80, 0xf7, 0xa6,
    0x37, 0x51, 0x3b, 0x53, 0x5b, 0x8f, 0x3b, 0xf1, 0xfb, 0xe3, 0x8c, 0x24,
    0x4f, 0x8a, 0x6d, 0x11, 0x41, 0x6b, 0xfd, 0x69, 0x58, 0x0d, 0xa5, 0xf1,
    0x61, 0x43, 0xba, 0xf7, 0xbb, 0x92, 0xfd, 0x9e, 0x89, 0x3c, 0x93, 0x03,
    0x65, 0xdd, 0x4c, 0x9a, 0xf3, 0xcd, 0x6f, 0x2f, 0x7f, 0x71, 0xb9, 0xc8,
    0xe0, 0x64, 0x48, 0x7d, 0xb6, 0x4e, 0x7d, 0xba, 0x5e, 0x9c, 0x90, 0xa6,
    0x69, 0x8c, 0x03, 0xe1, 0x54, 0x48, 0x70, 0x3a, 0xc0, 0x0f, 0x7d, 0x38,
    0x7e, 0xf8, 0x9a, 0x1f, 0xf8, 0xb4, 0x36, 0x5a, 0x9f, 0x27, 0x4f, 0x92,
    0xef, 0x01, 0x46, 0x76, 0x84, 0xb5, 0x63, 0x19, 0x00, 0xdb, 0xcd, 0xf7,
    0x9a, 0x28, 0xa5, 0x88, 0xd6, 0xa2, 0x23, 0x27, 0xef, 0xab, 0xb5, 0xd2,
    0xba, 0xb4, 0x7c, 0x7d, 0xf9, 0x69, 0xba, 0x9b, 0xbe, 0xe5, 0xe5, 0x1e,
    0x36, 0xb7, 0x07, 0x80, 0x67, 0xca, 0x53, 0x4f, 0x17, 0xde, 0x59, 0xe0,
    0xe6, 0xc6, 0x4d, 0x06, 0xbd, 0xc1, 0xd1, 0xed, 0x11, 0xf0, 0x1c, 0x1a,
    0x1f, 0x35, 0x4e, 0x64, 0x8f, 0xb3, 0x3b, 0x3d, 0xd3, 0xfb, 0x92, 0xfc,
    0xd0, 0x01, 0x66, 0xd7, 0xfc, 0x14, 0x4e, 0x86, 0xcc, 0x54, 0x67, 0x58,
    0x59, 0x5b, 0x79, 0x71, 0xf9, 0x39, 0xe0, 0x16, 0xe9, 0xbb, 0xae, 0x8b,
    0xfb, 0x86, 0x4b, 0x45, 0x57, 0xce, 0x55, 0x74, 0xa5, 0x00, 0xd4, 0x67,
    0xeb, 0xb4, 0xd6, 0x5a, 0x6b, 0x94, 0xa1, 0x32, 0x55, 0x41, 0x2b, 0x4d,
    0x92, 0x24, 0x87, 0x80, 0xe3, 0x63, 0x10, 0x80, 0x01, 0xe0, 0x70, 0x4c,
    0x29, 0x55, 0xb4, 0xb0, 0xaf, 0xe5, 0xeb, 0xcb, 0x43, 0x19, 0x8a, 0xdc,
    0xfa, 0xf1, 0x96, 0x48, 0x76, 0xd8, 0x82, 0x0c, 0xa5, 0x68, 0x25, 0x2b,
    0x66, 0xf6, 0x47, 0x26, 0xcd, 0x77, 0x9b, 0xeb, 0xc0, 0x8b, 0x80, 0xc9,
    0x93, 0x93, 0x17, 0xef, 0x6d, 0xdd, 0x93, 0x7e, 0xb7, 0x2f, 0xdd, 0x6e,
    0xb7, 0xa8, 0x30, 0xcb, 0x44, 0xfe, 0x16, 0xe9, 0xf7, 0xfb, 0x32, 0xcc,
    0x86, 0xd2, 0x7f, 0xdc, 0x97, 0x61, 0x7f, 0x28, 0x8b, 0x5f, 0x2d, 0x0e,
    0x60, 0x3f, 0x03, 0x67, 0xaf, 0xae, 0xb2, 0xff, 0xc3, 0xb5, 0xaf, 0xaf,
    0xdd, 0xe0, 0x5f, 0xd0, 0x65, 0xcd, 0x28, 0x19, 0xa1, 0x72, 0xc5, 0x20,
    0x1d, 0xa0, 0xac, 0xa2, 0xf7, 0xa8, 0x87, 0x35, 0x16, 0xb3, 0x6b, 0x58,
    0x78, 0x7b, 0xc1, 0x03, 0x4e, 0x3b, 0xe3, 0x59, 0xc5, 0x9d, 0x98, 0xb8,
    0x13, 0x7f, 0x12, 0x4c, 0x05, 0xf5, 0xc6, 0xc7, 0x8d, 0x6a, 0xa0, 0x03,
    0x7a, 0x69, 0x0f, 0xd7, 0x71, 0x49, 0xd2, 0x04, 0x2c, 0xb4, 0xe3, 0x36,
    0x71, 0x27, 0xde, 0xd9, 0xfc, 0x6d, 0x73, 0x15, 0xd8, 0x29, 0x89, 0x08,
    0xa5, 0x52, 0x09, 0xe5, 0xa8, 0xe2, 0x83, 0x14, 0x7a, 0x6d, 0xe9, 0xbb,
    0x25, 0xa3, 0x03, 0x8d, 0xf9, 0xcb, 0x10, 0xdd, 0x89, 0x76, 0xd2, 0x87,
    0xe9, 0x56, 0xf4, 0x20, 0x6a, 0x5b, 0x6b, 0x7f, 0x06, 0x06, 0x73, 0x67,
    0xe6, 0xb8, 0xdd, 0xb9, 0xbd, 0x97, 0xc1, 0xbe, 0x8f, 0xbd, 0xa9, 0xca,
    0x0a, 0xe0, 0x75, 0xe0, 0x1c, 0xf0, 0x0a, 0xc0, 0xdc, 0xfc, 0x1c, 0x5a,
    0xeb, 0x03, 0xb7, 0xb5, 0xe9, 0x1a, 0x00, 0xff, 0x01, 0xf7, 0x6f, 0x58,
    0xc8, 0x3f, 0x5a, 0x88, 0x59, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e,
    0x44, 0xae, 0x42, 0x60, 0x82
};

static const unsigned char image1_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x18,
    0x08, 0x06, 0x00, 0x00, 0x00, 0xe0, 0x77, 0x3d, 0xf8, 0x00, 0x00, 0x01,
    0xc8, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c, 0xd5, 0x95, 0xcf, 0x4b, 0xe3,
    0x40, 0x14, 0xc7, 0x3f, 0xd5, 0xe2, 0xf6, 0x24, 0xfe, 0xe8, 0x6a, 0x0f,
    0x76, 0x4f, 0x5e, 0x72, 0x4c, 0x6f, 0xfe, 0x0d, 0xc2, 0x22, 0xf1, 0x6f,
    0xf4, 0xda, 0x63, 0x0f, 0x2e, 0x4d, 0x41, 0x21, 0x05, 0x0b, 0x15, 0xec,
    0x61, 0x2e, 0x22, 0x82, 0xa5, 0x13, 0xb6, 0xb5, 0x11, 0x4f, 0xad, 0xd8,
    0x1d, 0x0f, 0x99, 0xa4, 0xc9, 0x24, 0x76, 0x51, 0xe2, 0xc1, 0x2f, 0x84,
    0x97, 0xf7, 0xcd, 0xe4, 0xbd, 0xbc, 0xf9, 0xce, 0xcb, 0x83, 0xef, 0x8e,
    0x92, 0x71, 0xbf, 0x66, 0x70, 0x9f, 0x85, 0x02, 0xfe, 0x01, 0x2a, 0x0a,
    0x56, 0xd2, 0x84, 0x89, 0x17, 0xcd, 0x2f, 0x12, 0x2f, 0x45, 0x57, 0xd2,
    0xaf, 0xea, 0xf5, 0xeb, 0xda, 0xee, 0x03, 0xcf, 0xc0, 0x9c, 0xc4, 0x03,
    0x95, 0x87, 0xd1, 0xd5, 0x28, 0x97, 0x9f, 0xde, 0x4c, 0x73, 0x16, 0x2b,
    0x05, 0xfc, 0x05, 0x8e, 0x80, 0x9f, 0xc0, 0xfa, 0x5a, 0xa2, 0x02, 0x00,
    0x82, 0x20, 0x48, 0x59, 0xef, 0xde, 0xcb, 0xe5, 0xdd, 0x5b, 0x37, 0xc3,
    0x4b, 0x5f, 0x46, 0x1f, 0xbb, 0x05, 0x6c, 0x24, 0xe3, 0x96, 0x53, 0x15,
    0x4c, 0x97, 0xf6, 0xee, 0xe2, 0x2e, 0xe5, 0xaf, 0xe2, 0x47, 0xe7, 0x23,
    0x05, 0x3c, 0x02, 0xc7, 0xc0, 0x01, 0x50, 0x2e, 0x27, 0x37, 0x5c, 0xf6,
    0x24, 0xde, 0xbd, 0x87, 0x55, 0xb3, 0x10, 0xbe, 0xc0, 0xaa, 0x5a, 0x34,
    0xbb, 0x4d, 0x9c, 0x57, 0x07, 0x31, 0x11, 0x34, 0x6a, 0x0d, 0xfa, 0x7e,
    0x1f, 0xab, 0x66, 0xd1, 0xec, 0x2c, 0xf9, 0x68, 0xfd, 0x53, 0xf7, 0x09,
    0xc2, 0x83, 0x92, 0x41, 0x21, 0x15, 0xb4, 0xdd, 0x76, 0xa6, 0x82, 0x4c,
    0xb6, 0x20, 0x08, 0x60, 0x7b, 0x69, 0xfb, 0x7e, 0x3f, 0xe5, 0xaf, 0xe2,
    0xed, 0xaa, 0x9d, 0xf7, 0xf1, 0x05, 0x6a, 0xe0, 0xfe, 0x4f, 0x83, 0x81,
    0xc4, 0x1d, 0xb8, 0xd8, 0x75, 0x1b, 0xe1, 0x87, 0x7b, 0x7e, 0x76, 0x79,
    0x86, 0x83, 0x13, 0xfb, 0x91, 0x06, 0xad, 0x5e, 0x8b, 0x53, 0x4e, 0x63,
    0x5f, 0xf8, 0x82, 0x59, 0x6f, 0x06, 0xf9, 0xfd, 0x54, 0xa8, 0x06, 0xe3,
    0x2f, 0xd3, 0xc0, 0xda, 0xb2, 0x00, 0x76, 0xc8, 0xf9, 0xdd, 0x14, 0xa9,
    0xc1, 0x02, 0xf8, 0x0d, 0xd4, 0xb3, 0x1a, 0x5c, 0x4b, 0xbc, 0xdb, 0x65,
    0x1f, 0xc4, 0x1a, 0xbc, 0x3a, 0x08, 0x29, 0x68, 0xd4, 0xb5, 0x06, 0x46,
    0x7f, 0x18, 0x1a, 0xa0, 0x2b, 0x28, 0x15, 0x5e, 0x41, 0xfb, 0xbc, 0x1d,
    0x55, 0x70, 0x02, 0xfc, 0x2a, 0x5c, 0x03, 0xbb, 0x96, 0xed, 0x83, 0x74,
    0x82, 0x31, 0x54, 0x26, 0x15, 0xbc, 0xae, 0x47, 0x65, 0x52, 0x21, 0xb8,
    0x0c, 0x98, 0x3d, 0xcc, 0x70, 0x3b, 0x2e, 0x0c, 0x41, 0x76, 0x24, 0x0c,
    0x09, 0xfd, 0x31, 0xc8, 0x3f, 0x09, 0x7f, 0x08, 0xad, 0x41, 0x2b, 0xf7,
    0x78, 0xc6, 0x28, 0xed, 0xbd, 0x3b, 0x6b, 0x94, 0xbe, 0xde, 0x83, 0xb9,
    0x13, 0xd1, 0xfc, 0x88, 0x13, 0x28, 0xc2, 0x21, 0x71, 0x08, 0xec, 0x12,
    0xfe, 0x72, 0x93, 0xd9, 0x56, 0x05, 0x37, 0xb1, 0x20, 0xec, 0xe6, 0x39,
    0xc6, 0x44, 0xfb, 0x01, 0x6c, 0x6a, 0x6b, 0x9e, 0x82, 0x8f, 0x24, 0x50,
    0x3a, 0xf8, 0x33, 0x30, 0xff, 0xf2, 0x99, 0x5c, 0x40, 0xac, 0xd5, 0x78,
    0x03, 0x09, 0xe9, 0xd3, 0x96, 0x22, 0xe6, 0x4c, 0xa3, 0x00, 0x00, 0x00,
    0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};

static const unsigned char image2_data[] = { 
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x16,
    0x08, 0x06, 0x00, 0x00, 0x00, 0xc4, 0xb4, 0x6c, 0x3b, 0x00, 0x00, 0x03,
    0xa4, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c, 0x9d, 0x95, 0x5f, 0x68, 0x5b,
    0x55, 0x18, 0xc0, 0x7f, 0x6d, 0xd2, 0xed, 0x5e, 0x69, 0x66, 0x5a, 0xad,
    0x26, 0xd0, 0x68, 0x23, 0x0e, 0xbc, 0xa1, 0x1d, 0x3b, 0x61, 0x0c, 0x13,
    0x15, 0xd6, 0x30, 0x10, 0xea, 0xdb, 0xc4, 0x97, 0x89, 0x9b, 0x14, 0xc6,
    0xa0, 0x1b, 0xf6, 0xc9, 0x87, 0xb1, 0x07, 0x7d, 0xe9, 0xe3, 0x1e, 0x84,
    0xfa, 0x20, 0xb2, 0xfa, 0x6f, 0xb0, 0x07, 0xb7, 0xbe, 0x58, 0xf2, 0x24,
    0x46, 0xba, 0x2d, 0x99, 0x38, 0x7b, 0xc1, 0xba, 0x1e, 0xa5, 0x65, 0xb7,
    0xd0, 0xb8, 0x1b, 0x4d, 0x68, 0x2e, 0x36, 0xdb, 0xbd, 0x4d, 0x6e, 0x7b,
    0x7d, 0xc8, 0x8d, 0x8d, 0xb5, 0xdd, 0x1f, 0x3f, 0xf8, 0xb8, 0xdc, 0xef,
    0x7c, 0xe7, 0x77, 0xce, 0xf9, 0xce, 0x77, 0xbe, 0xaf, 0x83, 0x47, 0x93,
    0x8e, 0x5d, 0xec, 0xde, 0xe3, 0x4e, 0xe8, 0x00, 0x3a, 0x7d, 0x0d, 0xf8,
    0xff, 0xdb, 0x7d, 0x3d, 0x5f, 0x37, 0x80, 0x4d, 0x5f, 0xbd, 0x76, 0x40,
    0xbb, 0x74, 0x02, 0x81, 0xf3, 0xef, 0x9f, 0x8f, 0x8a, 0x01, 0x71, 0xa2,
    0xb0, 0x54, 0x18, 0x8e, 0x10, 0xc9, 0xc8, 0x8a, 0x44, 0x8b, 0x68, 0x18,
    0x8e, 0x41, 0x7a, 0x20, 0x8d, 0xb4, 0x24, 0xc7, 0x5f, 0x3b, 0x3e, 0x2b,
    0xcb, 0xf2, 0x7a, 0x69, 0xa9, 0x74, 0xf9, 0xec, 0x07, 0x67, 0x57, 0x80,
    0x3a, 0xe0, 0xb6, 0x16, 0x6a, 0x07, 0x07, 0x66, 0x26, 0x66, 0x92, 0xd9,
    0x62, 0xf6, 0x73, 0xc7, 0x75, 0x12, 0xf1, 0xfe, 0x38, 0x99, 0x48, 0x06,
    0x43, 0x31, 0x10, 0x31, 0x81, 0xb4, 0x24, 0x99, 0xc1, 0x0c, 0xa6, 0x6b,
    0x92, 0x78, 0x31, 0x81, 0x59, 0x31, 0x71, 0x96, 0x1d, 0x2e, 0x7e, 0x73,
    0x11, 0xc7, 0x75, 0x96, 0xaa, 0x95, 0xea, 0x7b, 0x53, 0x9f, 0x4d, 0xfd,
    0x00, 0xd8, 0x40, 0x3d, 0xd0, 0xda, 0xe9, 0xcc, 0x27, 0x33, 0xef, 0x4e,
    0x2f, 0x4c, 0xcf, 0x9c, 0x7e, 0xe3, 0x74, 0x5f, 0xd7, 0xbe, 0x2e, 0x0e,
    0xc7, 0x0f, 0x63, 0xd4, 0x0d, 0xc4, 0xf3, 0x02, 0x59, 0x91, 0xa4, 0x9f,
    0x4b, 0xb3, 0xe2, 0xac, 0x70, 0xe0, 0x85, 0x03, 0xe0, 0x42, 0xe8, 0xa9,
    0x10, 0x3d, 0xc1, 0x1e, 0x32, 0xaf, 0x64, 0x58, 0x6b, 0xac, 0xf5, 0x06,
    0x2b, 0xc1, 0xb7, 0x63, 0x43, 0xb1, 0x7b, 0xfa, 0x9c, 0x7e, 0x1b, 0x70,
    0x5b, 0xe0, 0x20, 0x3d, 0xdc, 0x1a, 0x3f, 0x32, 0x8e, 0x74, 0x25, 0xfb,
    0xeb, 0xfb, 0xd1, 0x57, 0x75, 0xc4, 0x1e, 0xc1, 0xe2, 0xc6, 0x22, 0xda,
    0xd3, 0x1a, 0xcb, 0xf7, 0x97, 0x49, 0x0f, 0xa4, 0x31, 0x1d, 0x93, 0x50,
    0x5f, 0x08, 0xdb, 0xb6, 0xe9, 0x52, 0xba, 0x98, 0xbb, 0x33, 0x47, 0xa2,
    0x37, 0x41, 0x71, 0xb3, 0xc8, 0xe2, 0x2f, 0x8b, 0xc3, 0xf3, 0x0b, 0xf3,
    0x5f, 0x01, 0xeb, 0x9d, 0x7e, 0x9c, 0x03, 0x22, 0x22, 0x90, 0xae, 0x44,
    0x44, 0x05, 0x46, 0xb7, 0x81, 0x88, 0x0a, 0x74, 0x57, 0x47, 0x0b, 0x6b,
    0xc8, 0x8a, 0x44, 0xf4, 0x0b, 0xb0, 0x20, 0x1a, 0x8b, 0x02, 0xa0, 0xaa,
    0x2a, 0x94, 0x40, 0x0b, 0x6b, 0xcc, 0x95, 0xe6, 0x10, 0x7d, 0x02, 0xcb,
    0xb6, 0x00, 0xc2, 0x80, 0xda, 0xd9, 0x0a, 0x70, 0x89, 0xd2, 0x78, 0xfe,
    0x66, 0x9e, 0xc2, 0x62, 0x01, 0x11, 0x15, 0x98, 0x0d, 0x13, 0xcd, 0xd5,
    0xc8, 0x2d, 0xe6, 0x88, 0x37, 0xe2, 0xe4, 0x97, 0xf2, 0x54, 0x95, 0x2a,
    0x0b, 0x72, 0x01, 0x00, 0xd3, 0x34, 0x21, 0x0c, 0x7a, 0x51, 0x27, 0x6a,
    0x46, 0x99, 0x98, 0x9a, 0x40, 0x09, 0x2a, 0x9f, 0x6e, 0xcf, 0x8a, 0x2e,
    0xe0, 0xc9, 0x63, 0x6f, 0x1d, 0x3b, 0x92, 0xea, 0x4f, 0x7d, 0x2d, 0x6b,
    0x92, 0x91, 0x83, 0x23, 0x18, 0x8e, 0x41, 0x32, 0x92, 0xc4, 0xa8, 0x19,
    0xa4, 0xe2, 0x29, 0x0c, 0xd7, 0x20, 0xf3, 0x52, 0x06, 0xb5, 0xa6, 0x52,
    0xa5, 0xca, 0x85, 0xcb, 0x17, 0x08, 0xbb, 0x61, 0x72, 0xf3, 0x39, 0xaa,
    0x56, 0xf5, 0xc3, 0xc2, 0xcd, 0xc2, 0x2d, 0x60, 0x05, 0xb8, 0xdb, 0x02,
    0x77, 0x02, 0x7b, 0xfd, 0x63, 0x3c, 0x3b, 0x7a, 0x6a, 0x54, 0x4f, 0x1f,
    0x4a, 0x63, 0x16, 0x4d, 0x2c, 0xcb, 0xc2, 0x76, 0xed, 0xe6, 0xf1, 0x83,
    0x2a, 0x28, 0x90, 0xea, 0x4e, 0x21, 0x91, 0x98, 0x25, 0x13, 0x29, 0x25,
    0xb9, 0xef, 0x73, 0x27, 0x81, 0x0a, 0x70, 0x17, 0xf8, 0x13, 0xb0, 0xfe,
    0x95, 0x6e, 0xc0, 0x1e, 0x60, 0x1f, 0xf0, 0xcc, 0xe4, 0xb9, 0xc9, 0x9f,
    0xcf, 0xbc, 0x73, 0x06, 0x34, 0xa0, 0x0c, 0xb6, 0x65, 0x33, 0xfd, 0xe3,
    0x34, 0xa2, 0x4f, 0x90, 0xd5, 0xb3, 0xa8, 0x35, 0x95, 0xab, 0x85, 0xab,
    0xe4, 0xbe, 0xcd, 0x9d, 0x04, 0xfe, 0x68, 0x83, 0xae, 0x01, 0xeb, 0x81,
    0x36, 0xb0, 0xe7, 0xbf, 0x1e, 0x17, 0x68, 0x64, 0xaf, 0x67, 0xbf, 0x2c,
    0xd7, 0xcb, 0x63, 0xc9, 0x83, 0x49, 0x42, 0xd1, 0x10, 0xc5, 0xd5, 0x22,
    0xb1, 0xbd, 0x31, 0xae, 0xfd, 0x76, 0x0d, 0xf9, 0xab, 0x64, 0xf6, 0xa7,
    0x59, 0x72, 0xdf, 0xfd, 0x03, 0xfd, 0xdd, 0xff, 0xfe, 0x05, 0xac, 0xfb,
    0x9c, 0xff, 0x48, 0x2b, 0x2c, 0x7d, 0xc0, 0xe0, 0xe4, 0xb9, 0x49, 0xcf,
    0xbb, 0xe3, 0x79, 0x5e, 0xdd, 0xf3, 0x2e, 0x7d, 0x71, 0xc9, 0xbb, 0xf2,
    0xd1, 0x15, 0x2f, 0x75, 0x28, 0xe5, 0x01, 0x27, 0x80, 0xd7, 0x81, 0x41,
    0xdf, 0x57, 0xf1, 0xe7, 0x3e, 0x50, 0xda, 0xe1, 0x43, 0x63, 0xa7, 0xc6,
    0xbc, 0xdb, 0x0b, 0xb7, 0xbd, 0x1b, 0x1f, 0xdf, 0xf0, 0x52, 0x2f, 0xa7,
    0x3c, 0x60, 0x14, 0x18, 0x01, 0x86, 0x76, 0x83, 0xee, 0xb6, 0xc2, 0x26,
    0xd0, 0xf0, 0xe3, 0x55, 0x76, 0x70, 0x48, 0x0c, 0x24, 0xc8, 0x5b, 0x79,
    0x1c, 0xc7, 0x01, 0xb8, 0x47, 0xf3, 0xb2, 0xca, 0xbe, 0x4f, 0x7d, 0xfb,
    0xf1, 0x1f, 0xb4, 0xf5, 0x16, 0xfc, 0x3e, 0x80, 0x8d, 0x4d, 0x52, 0x49,
    0xe2, 0xb8, 0x0e, 0x80, 0x03, 0xd4, 0xfc, 0xb1, 0xc6, 0x76, 0xe8, 0xc3,
    0xc0, 0xb0, 0x55, 0x16, 0x51, 0x55, 0x15, 0x33, 0x6c, 0x22, 0x82, 0xa2,
    0xb5, 0xe8, 0x86, 0xaf, 0x3b, 0xd6, 0xe4, 0x47, 0x01, 0xa3, 0xa0, 0x50,
    0x2d, 0x57, 0xd1, 0xd0, 0xd0, 0x5d, 0xbd, 0x65, 0xf7, 0xda, 0x7d, 0x1e,
    0x17, 0x0c, 0xe0, 0x39, 0x38, 0xf4, 0x04, 0x7b, 0x30, 0xa3, 0x26, 0x4a,
    0x50, 0x81, 0xad, 0xba, 0xbb, 0x6b, 0x07, 0x79, 0x98, 0x74, 0xd0, 0xbc,
    0xf1, 0xfe, 0xe1, 0xa3, 0xc3, 0xde, 0xc8, 0xd1, 0x11, 0x0f, 0x78, 0x13,
    0x78, 0x15, 0xe8, 0xf7, 0xc7, 0x76, 0xec, 0x42, 0xbb, 0xb5, 0xa6, 0x76,
    0x09, 0x02, 0xdd, 0x34, 0xd3, 0xaa, 0xd7, 0xb7, 0xad, 0xd2, 0xcc, 0x88,
    0x9a, 0xbf, 0xfb, 0xff, 0x05, 0xee, 0xa0, 0x59, 0xa4, 0x9e, 0x00, 0x54,
    0xdf, 0x66, 0xb3, 0x95, 0x11, 0x3b, 0x86, 0xe3, 0x6f, 0x1f, 0x71, 0x8b,
    0xf1, 0x4b, 0xaa, 0x76, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e,
    0x44, 0xae, 0x42, 0x60, 0x82
};


/*
 *  Constructs a FLWidgetTableDB as a child of 'parent', with the
 *  name 'name' and widget flags set to 'f'.
 */
FLWidgetTableDB::FLWidgetTableDB( QWidget* parent, const char* name, WFlags fl )
    : QWidget( parent, name, fl )
{
    QImage img;
    img.loadFromData( image0_data, sizeof( image0_data ), "PNG" );
    image0 = img;
    img.loadFromData( image1_data, sizeof( image1_data ), "PNG" );
    image1 = img;
    img.loadFromData( image2_data, sizeof( image2_data ), "PNG" );
    image2 = img;
    if ( !name )
	setName( "FLWidgetTableDB" );
    setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)5, (QSizePolicy::SizeType)5, 0, 0, sizePolicy().hasHeightForWidth() ) );
    setFocusPolicy( QWidget::StrongFocus );
    FLWidgetTableDBLayout = new QVBoxLayout( this, 0, 0, "FLWidgetTableDBLayout"); 

    FrameFind = new QFrame( this, "FrameFind" );
    FrameFind->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)5, (QSizePolicy::SizeType)1, 0, 0, FrameFind->sizePolicy().hasHeightForWidth() ) );
    FrameFind->setFrameShape( QFrame::Box );
    FrameFind->setFrameShadow( QFrame::Plain );
    FrameFindLayout = new QHBoxLayout( FrameFind, 2, 4, "FrameFindLayout"); 

    TextLabelSearch = new QLabel( FrameFind, "TextLabelSearch" );
    TextLabelSearch->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)1, (QSizePolicy::SizeType)0, 0, 0, TextLabelSearch->sizePolicy().hasHeightForWidth() ) );
    TextLabelSearch->setMinimumSize( QSize( 0, 0 ) );
    TextLabelSearch->setFrameShape( QLabel::MShape );
    TextLabelSearch->setFrameShadow( QLabel::MShadow );
    FrameFindLayout->addWidget( TextLabelSearch );

    lineEditSearch = new QLineEdit( FrameFind, "lineEditSearch" );
    lineEditSearch->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)7, (QSizePolicy::SizeType)0, 0, 0, lineEditSearch->sizePolicy().hasHeightForWidth() ) );
    lineEditSearch->setFocusPolicy( QLineEdit::StrongFocus );
    lineEditSearch->setAcceptDrops( FALSE );
    lineEditSearch->setFrameShape( QLineEdit::LineEditPanel );
    lineEditSearch->setFrameShadow( QLineEdit::Sunken );
    lineEditSearch->setMaxLength( 100 );
    lineEditSearch->setFrame( TRUE );
    FrameFindLayout->addWidget( lineEditSearch );

    TextLabelIn = new QLabel( FrameFind, "TextLabelIn" );
    TextLabelIn->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)1, (QSizePolicy::SizeType)0, 0, 0, TextLabelIn->sizePolicy().hasHeightForWidth() ) );
    FrameFindLayout->addWidget( TextLabelIn );

    comboBoxFieldToSearch = new QComboBox( FALSE, FrameFind, "comboBoxFieldToSearch" );
    comboBoxFieldToSearch->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)7, (QSizePolicy::SizeType)0, 0, 0, comboBoxFieldToSearch->sizePolicy().hasHeightForWidth() ) );
    comboBoxFieldToSearch->setFocusPolicy( QComboBox::StrongFocus );
    comboBoxFieldToSearch->setAutoMask( FALSE );
    comboBoxFieldToSearch->setDuplicatesEnabled( FALSE );
    FrameFindLayout->addWidget( comboBoxFieldToSearch );
    FLWidgetTableDBLayout->addWidget( FrameFind );

    layout6 = new QHBoxLayout( 0, 1, 1, "layout6"); 

    tabTable = new QWidgetStack( this, "tabTable" );
    tabTable->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)7, (QSizePolicy::SizeType)7, 0, 0, tabTable->sizePolicy().hasHeightForWidth() ) );
    tabTable->setLineWidth( 0 );

    tabData = new QWidget( tabTable, "tabData" );
    tabDataLayout = new QVBoxLayout( tabData, 0, 0, "tabDataLayout"); 
    tabTable->addWidget( tabData, 0 );

    tabFilter = new QWidget( tabTable, "tabFilter" );
    tabFilterLayout = new QVBoxLayout( tabFilter, 2, 4, "tabFilterLayout"); 

    layout1 = new QHBoxLayout( 0, 0, 0, "layout1"); 

    pbClear = new QPushButton( tabFilter, "pbClear" );
    pbClear->setMinimumSize( QSize( 0, 22 ) );
    pbClear->setMaximumSize( QSize( 32767, 22 ) );
    pbClear->setFocusPolicy( QPushButton::NoFocus );
    pbClear->setIconSet( QIconSet( image0 ) );
    layout1->addWidget( pbClear );
    tabFilterLayout->addLayout( layout1 );

    tdbFilter = new QTable( tabFilter, "tdbFilter" );
    tdbFilter->setFocusPolicy( QTable::NoFocus );
    tdbFilter->setFrameShape( QTable::Box );
    tdbFilter->setFrameShadow( QTable::Plain );
    tdbFilter->setLineWidth( 0 );
    tdbFilter->setNumRows( 0 );
    tdbFilter->setNumCols( 0 );
    tdbFilter->setSelectionMode( QTable::Single );
    tdbFilter->setFocusStyle( QTable::SpreadSheet );
    tabFilterLayout->addWidget( tdbFilter );
    tabTable->addWidget( tabFilter, 1 );
    layout6->addWidget( tabTable );

    bgrDataFilter = new QButtonGroup( this, "bgrDataFilter" );
    bgrDataFilter->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)0, (QSizePolicy::SizeType)5, 0, 0, bgrDataFilter->sizePolicy().hasHeightForWidth() ) );
    bgrDataFilter->setMinimumSize( QSize( 25, 0 ) );
    bgrDataFilter->setMaximumSize( QSize( 25, 32767 ) );
    bgrDataFilter->setFrameShape( QButtonGroup::NoFrame );
    bgrDataFilter->setFrameShadow( QButtonGroup::Plain );
    bgrDataFilter->setLineWidth( 0 );
    bgrDataFilter->setFlat( FALSE );
    bgrDataFilter->setExclusive( TRUE );
    bgrDataFilter->setColumnLayout(0, Qt::Vertical );
    bgrDataFilter->layout()->setSpacing( 1 );
    bgrDataFilter->layout()->setMargin( 0 );
    bgrDataFilterLayout = new QVBoxLayout( bgrDataFilter->layout() );
    bgrDataFilterLayout->setAlignment( Qt::AlignTop );

    pbData = new QPushButton( bgrDataFilter, "pbData" );
    pbData->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)0, (QSizePolicy::SizeType)0, 0, 0, pbData->sizePolicy().hasHeightForWidth() ) );
    pbData->setMinimumSize( QSize( 24, 24 ) );
    pbData->setMaximumSize( QSize( 22, 22 ) );
    pbData->setFocusPolicy( QPushButton::NoFocus );
    pbData->setToggleButton( TRUE );
    pbData->setOn( TRUE );
    pbData->setIconSet( QIconSet( image1 ) );
    bgrDataFilterLayout->addWidget( pbData );

    pbFilter = new QPushButton( bgrDataFilter, "pbFilter" );
    pbFilter->setSizePolicy( QSizePolicy( (QSizePolicy::SizeType)0, (QSizePolicy::SizeType)0, 0, 0, pbFilter->sizePolicy().hasHeightForWidth() ) );
    pbFilter->setMinimumSize( QSize( 24, 24 ) );
    pbFilter->setMaximumSize( QSize( 22, 22 ) );
    pbFilter->setFocusPolicy( QPushButton::NoFocus );
    pbFilter->setToggleButton( TRUE );
    pbFilter->setOn( FALSE );
    pbFilter->setIconSet( QIconSet( image2 ) );
    bgrDataFilterLayout->addWidget( pbFilter );
    layout6->addWidget( bgrDataFilter );
    FLWidgetTableDBLayout->addLayout( layout6 );
    languageChange();
    resize( QSize(502, 504).expandedTo(minimumSizeHint()) );
    clearWState( WState_Polished );

    // signals and slots connections
    connect( comboBoxFieldToSearch, SIGNAL( activated(int) ), lineEditSearch, SLOT( setFocus() ) );
    connect( comboBoxFieldToSearch, SIGNAL( activated(int) ), lineEditSearch, SLOT( selectAll() ) );
    connect( lineEditSearch, SIGNAL( textChanged(const QString&) ), this, SLOT( filterRecords(const QString&) ) );
    connect( comboBoxFieldToSearch, SIGNAL( activated(const QString&) ), this, SLOT( putFirstCol(const QString&) ) );
    connect( pbClear, SIGNAL( clicked() ), this, SLOT( tdbFilterClear() ) );
    connect( pbData, SIGNAL( toggled(bool) ), this, SLOT( activeTabData(bool) ) );
    connect( pbFilter, SIGNAL( toggled(bool) ), this, SLOT( activeTabFilter(bool) ) );

    // tab order
    setTabOrder( lineEditSearch, comboBoxFieldToSearch );
    init();
}

/*
 *  Destroys the object and frees any allocated resources
 */
FLWidgetTableDB::~FLWidgetTableDB()
{
    destroy();
    // no need to delete child widgets, Qt does it all for us
}

/*
 *  Sets the strings of the subwidgets using the current
 *  language.
 */
void FLWidgetTableDB::languageChange()
{
    setCaption( tr( "FLWidgetTableDB" ) );
    TextLabelSearch->setText( tr( "Buscar" ) );
    QToolTip::add( TextLabelSearch, QString::null );
    QWhatsThis::add( TextLabelSearch, tr( "", "Finde records in the table" ) );
    QToolTip::add( lineEditSearch, tr( "Busca en el campo seleccionado coincidencias que empiezen por el texto escrito" ) );
    QWhatsThis::add( lineEditSearch, tr( "Busca en el campo seleccionado coincidencias que empiezen por el texto escrito" ) );
    TextLabelIn->setText( tr( "en" ) );
    QToolTip::add( comboBoxFieldToSearch, tr( "Ordena los registros de la tabla por el campo seleccionado" ) );
    QWhatsThis::add( comboBoxFieldToSearch, tr( "Ordena los registros de la tabla por el campo seleccionado" ) );
    pbClear->setText( QString::null );
    QToolTip::add( pbClear, tr( "Reiniciar filtro" ) );
    QWhatsThis::add( pbClear, tr( "Reiniciar filtro" ) );
    bgrDataFilter->setTitle( QString::null );
    pbData->setText( QString::null );
    QToolTip::add( pbData, tr( "Ver/Ocultar tabla de datos" ) );
    QWhatsThis::add( pbData, tr( "Ver/Ocultar tabla de datos" ) );
    pbFilter->setText( QString::null );
    QToolTip::add( pbFilter, tr( "Ver/Ocultar filtro" ) );
    QWhatsThis::add( pbFilter, tr( "Ver/Ocultar filtro" ) );
}

void FLWidgetTableDB::init()
{
}

void FLWidgetTableDB::destroy()
{
}

void FLWidgetTableDB::filterRecords(const QString&)
{
    qWarning( "FLWidgetTableDB::filterRecords(const QString&): Not implemented yet" );
}

void FLWidgetTableDB::putFirstCol(const QString&)
{
    qWarning( "FLWidgetTableDB::putFirstCol(const QString&): Not implemented yet" );
}

void FLWidgetTableDB::tdbFilterClear()
{
    qWarning( "FLWidgetTableDB::tdbFilterClear(): Not implemented yet" );
}

void FLWidgetTableDB::activeTabData(bool)
{
    qWarning( "FLWidgetTableDB::activeTabData(bool): Not implemented yet" );
}

void FLWidgetTableDB::activeTabFilter(bool)
{
    qWarning( "FLWidgetTableDB::activeTabFilter(bool): Not implemented yet" );
}

